Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    COLON
    COMPARISON
    DECREMENT
    DIVIDE
    FOR
    GREATER
    GREATEREQUAL
    INCREMENT
    INT
    LBRACKET
    LESS
    LESSEQUAL
    MINUS
    MODULO
    PLUS
    RBRACKET
    STRING
    TIMES

Grammar

Rule 0     S' -> program
Rule 1     program -> body
Rule 2     program -> empty
Rule 3     expression -> NUMBER
Rule 4     expression -> ID
Rule 5     body -> line body
Rule 6     body -> empty
Rule 7     empty -> <empty>
Rule 8     line -> statement SEMICOLON
Rule 9     line -> expression SEMICOLON
Rule 10    line -> if_statement
Rule 11    if_statement -> IF expression body END
Rule 12    if_statement -> IF expression body ELSE body END
Rule 13    statement -> ID EQUALS expression
Rule 14    statement -> RETURN expression
Rule 15    statement -> RETURN
Rule 16    expression -> LPAREN expression RPAREN
Rule 17    function_args -> expression COMMA function_args
Rule 18    function_args -> expression
Rule 19    function_args -> empty
Rule 20    expression -> DISP LPAREN expression RPAREN

Terminals, with rules where they appear

BREAK                : 
COLON                : 
COMMA                : 17
COMPARISON           : 
DECREMENT            : 
DISP                 : 20
DIVIDE               : 
ELSE                 : 12
END                  : 11 12
EQUALS               : 13
FOR                  : 
GREATER              : 
GREATEREQUAL         : 
ID                   : 4 13
IF                   : 11 12
INCREMENT            : 
INT                  : 
LBRACKET             : 
LESS                 : 
LESSEQUAL            : 
LPAREN               : 16 20
MINUS                : 
MODULO               : 
NUMBER               : 3
PLUS                 : 
RBRACKET             : 
RETURN               : 14 15
RPAREN               : 16 20
SEMICOLON            : 8 9
STRING               : 
TIMES                : 
error                : 

Nonterminals, with rules where they appear

body                 : 1 5 11 12 12
empty                : 2 6 19
expression           : 9 11 12 13 14 16 17 18 20
function_args        : 17
if_statement         : 10
line                 : 5
program              : 0
statement            : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . body
    (2) program -> . empty
    (5) body -> . line body
    (6) body -> . empty
    (7) empty -> .
    (8) line -> . statement SEMICOLON
    (9) line -> . expression SEMICOLON
    (10) line -> . if_statement
    (13) statement -> . ID EQUALS expression
    (14) statement -> . RETURN expression
    (15) statement -> . RETURN
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN
    (11) if_statement -> . IF expression body END
    (12) if_statement -> . IF expression body ELSE body END

    $end            reduce using rule 7 (empty -> .)
    ID              shift and go to state 8
    RETURN          shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12
    IF              shift and go to state 13

    program                        shift and go to state 1
    body                           shift and go to state 2
    empty                          shift and go to state 3
    line                           shift and go to state 4
    statement                      shift and go to state 5
    expression                     shift and go to state 6
    if_statement                   shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> body .

    $end            reduce using rule 1 (program -> body .)


state 3

    (2) program -> empty .
    (6) body -> empty .

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)

  ! $end            [ reduce using rule 6 (body -> empty .) ]


state 4

    (5) body -> line . body
    (5) body -> . line body
    (6) body -> . empty
    (8) line -> . statement SEMICOLON
    (9) line -> . expression SEMICOLON
    (10) line -> . if_statement
    (7) empty -> .
    (13) statement -> . ID EQUALS expression
    (14) statement -> . RETURN expression
    (15) statement -> . RETURN
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN
    (11) if_statement -> . IF expression body END
    (12) if_statement -> . IF expression body ELSE body END

    $end            reduce using rule 7 (empty -> .)
    END             reduce using rule 7 (empty -> .)
    ELSE            reduce using rule 7 (empty -> .)
    ID              shift and go to state 8
    RETURN          shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12
    IF              shift and go to state 13

    line                           shift and go to state 4
    body                           shift and go to state 14
    empty                          shift and go to state 15
    statement                      shift and go to state 5
    expression                     shift and go to state 6
    if_statement                   shift and go to state 7

state 5

    (8) line -> statement . SEMICOLON

    SEMICOLON       shift and go to state 16


state 6

    (9) line -> expression . SEMICOLON

    SEMICOLON       shift and go to state 17


state 7

    (10) line -> if_statement .

    ID              reduce using rule 10 (line -> if_statement .)
    RETURN          reduce using rule 10 (line -> if_statement .)
    NUMBER          reduce using rule 10 (line -> if_statement .)
    LPAREN          reduce using rule 10 (line -> if_statement .)
    DISP            reduce using rule 10 (line -> if_statement .)
    IF              reduce using rule 10 (line -> if_statement .)
    $end            reduce using rule 10 (line -> if_statement .)
    END             reduce using rule 10 (line -> if_statement .)
    ELSE            reduce using rule 10 (line -> if_statement .)


state 8

    (13) statement -> ID . EQUALS expression
    (4) expression -> ID .

    EQUALS          shift and go to state 18
    SEMICOLON       reduce using rule 4 (expression -> ID .)


state 9

    (14) statement -> RETURN . expression
    (15) statement -> RETURN .
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN

    SEMICOLON       reduce using rule 15 (statement -> RETURN .)
    NUMBER          shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12

    expression                     shift and go to state 19

state 10

    (3) expression -> NUMBER .

    SEMICOLON       reduce using rule 3 (expression -> NUMBER .)
    RPAREN          reduce using rule 3 (expression -> NUMBER .)
    ID              reduce using rule 3 (expression -> NUMBER .)
    RETURN          reduce using rule 3 (expression -> NUMBER .)
    NUMBER          reduce using rule 3 (expression -> NUMBER .)
    LPAREN          reduce using rule 3 (expression -> NUMBER .)
    DISP            reduce using rule 3 (expression -> NUMBER .)
    IF              reduce using rule 3 (expression -> NUMBER .)
    END             reduce using rule 3 (expression -> NUMBER .)
    ELSE            reduce using rule 3 (expression -> NUMBER .)


state 11

    (16) expression -> LPAREN . expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12

    expression                     shift and go to state 21

state 12

    (20) expression -> DISP . LPAREN expression RPAREN

    LPAREN          shift and go to state 22


state 13

    (11) if_statement -> IF . expression body END
    (12) if_statement -> IF . expression body ELSE body END
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12

    expression                     shift and go to state 23

state 14

    (5) body -> line body .

    $end            reduce using rule 5 (body -> line body .)
    END             reduce using rule 5 (body -> line body .)
    ELSE            reduce using rule 5 (body -> line body .)


state 15

    (6) body -> empty .

    $end            reduce using rule 6 (body -> empty .)
    END             reduce using rule 6 (body -> empty .)
    ELSE            reduce using rule 6 (body -> empty .)


state 16

    (8) line -> statement SEMICOLON .

    ID              reduce using rule 8 (line -> statement SEMICOLON .)
    RETURN          reduce using rule 8 (line -> statement SEMICOLON .)
    NUMBER          reduce using rule 8 (line -> statement SEMICOLON .)
    LPAREN          reduce using rule 8 (line -> statement SEMICOLON .)
    DISP            reduce using rule 8 (line -> statement SEMICOLON .)
    IF              reduce using rule 8 (line -> statement SEMICOLON .)
    $end            reduce using rule 8 (line -> statement SEMICOLON .)
    END             reduce using rule 8 (line -> statement SEMICOLON .)
    ELSE            reduce using rule 8 (line -> statement SEMICOLON .)


state 17

    (9) line -> expression SEMICOLON .

    ID              reduce using rule 9 (line -> expression SEMICOLON .)
    RETURN          reduce using rule 9 (line -> expression SEMICOLON .)
    NUMBER          reduce using rule 9 (line -> expression SEMICOLON .)
    LPAREN          reduce using rule 9 (line -> expression SEMICOLON .)
    DISP            reduce using rule 9 (line -> expression SEMICOLON .)
    IF              reduce using rule 9 (line -> expression SEMICOLON .)
    $end            reduce using rule 9 (line -> expression SEMICOLON .)
    END             reduce using rule 9 (line -> expression SEMICOLON .)
    ELSE            reduce using rule 9 (line -> expression SEMICOLON .)


state 18

    (13) statement -> ID EQUALS . expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12

    expression                     shift and go to state 24

state 19

    (14) statement -> RETURN expression .

    SEMICOLON       reduce using rule 14 (statement -> RETURN expression .)


state 20

    (4) expression -> ID .

    SEMICOLON       reduce using rule 4 (expression -> ID .)
    RPAREN          reduce using rule 4 (expression -> ID .)
    ID              reduce using rule 4 (expression -> ID .)
    RETURN          reduce using rule 4 (expression -> ID .)
    NUMBER          reduce using rule 4 (expression -> ID .)
    LPAREN          reduce using rule 4 (expression -> ID .)
    DISP            reduce using rule 4 (expression -> ID .)
    IF              reduce using rule 4 (expression -> ID .)
    END             reduce using rule 4 (expression -> ID .)
    ELSE            reduce using rule 4 (expression -> ID .)


state 21

    (16) expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 25


state 22

    (20) expression -> DISP LPAREN . expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12

    expression                     shift and go to state 26

state 23

    (11) if_statement -> IF expression . body END
    (12) if_statement -> IF expression . body ELSE body END
    (5) body -> . line body
    (6) body -> . empty
    (8) line -> . statement SEMICOLON
    (9) line -> . expression SEMICOLON
    (10) line -> . if_statement
    (7) empty -> .
    (13) statement -> . ID EQUALS expression
    (14) statement -> . RETURN expression
    (15) statement -> . RETURN
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN
    (11) if_statement -> . IF expression body END
    (12) if_statement -> . IF expression body ELSE body END

    END             reduce using rule 7 (empty -> .)
    ELSE            reduce using rule 7 (empty -> .)
    ID              shift and go to state 8
    RETURN          shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 6
    body                           shift and go to state 27
    line                           shift and go to state 4
    empty                          shift and go to state 15
    statement                      shift and go to state 5
    if_statement                   shift and go to state 7

state 24

    (13) statement -> ID EQUALS expression .

    SEMICOLON       reduce using rule 13 (statement -> ID EQUALS expression .)


state 25

    (16) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    DISP            reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 16 (expression -> LPAREN expression RPAREN .)


state 26

    (20) expression -> DISP LPAREN expression . RPAREN

    RPAREN          shift and go to state 28


state 27

    (11) if_statement -> IF expression body . END
    (12) if_statement -> IF expression body . ELSE body END

    END             shift and go to state 29
    ELSE            shift and go to state 30


state 28

    (20) expression -> DISP LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    RPAREN          reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    ID              reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    RETURN          reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    NUMBER          reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    LPAREN          reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    DISP            reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    IF              reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    END             reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)
    ELSE            reduce using rule 20 (expression -> DISP LPAREN expression RPAREN .)


state 29

    (11) if_statement -> IF expression body END .

    ID              reduce using rule 11 (if_statement -> IF expression body END .)
    RETURN          reduce using rule 11 (if_statement -> IF expression body END .)
    NUMBER          reduce using rule 11 (if_statement -> IF expression body END .)
    LPAREN          reduce using rule 11 (if_statement -> IF expression body END .)
    DISP            reduce using rule 11 (if_statement -> IF expression body END .)
    IF              reduce using rule 11 (if_statement -> IF expression body END .)
    $end            reduce using rule 11 (if_statement -> IF expression body END .)
    END             reduce using rule 11 (if_statement -> IF expression body END .)
    ELSE            reduce using rule 11 (if_statement -> IF expression body END .)


state 30

    (12) if_statement -> IF expression body ELSE . body END
    (5) body -> . line body
    (6) body -> . empty
    (8) line -> . statement SEMICOLON
    (9) line -> . expression SEMICOLON
    (10) line -> . if_statement
    (7) empty -> .
    (13) statement -> . ID EQUALS expression
    (14) statement -> . RETURN expression
    (15) statement -> . RETURN
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (16) expression -> . LPAREN expression RPAREN
    (20) expression -> . DISP LPAREN expression RPAREN
    (11) if_statement -> . IF expression body END
    (12) if_statement -> . IF expression body ELSE body END

    END             reduce using rule 7 (empty -> .)
    ID              shift and go to state 8
    RETURN          shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    DISP            shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 6
    body                           shift and go to state 31
    line                           shift and go to state 4
    empty                          shift and go to state 15
    statement                      shift and go to state 5
    if_statement                   shift and go to state 7

state 31

    (12) if_statement -> IF expression body ELSE body . END

    END             shift and go to state 32


state 32

    (12) if_statement -> IF expression body ELSE body END .

    ID              reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    RETURN          reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    NUMBER          reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    LPAREN          reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    DISP            reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    IF              reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    $end            reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    END             reduce using rule 12 (if_statement -> IF expression body ELSE body END .)
    ELSE            reduce using rule 12 (if_statement -> IF expression body ELSE body END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 3 resolved using rule (program -> empty)
WARNING: rejected rule (body -> empty) in state 3
