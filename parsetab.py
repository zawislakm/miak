# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BREAK COLON COMMA COMPARISON DECREMENT DISP DIVIDE ELSE END EQUALS FOR GREATER GREATEREQUAL ID IF INCREMENT INT LBRACKET LESS LESSEQUAL LPAREN MINUS MODULO NUMBER PLUS RBRACKET RETURN RPAREN SEMICOLON STRING TIMESprogram : body\n            | emptyexpression : NUMBERexpression : IDbody : line body\n            | emptyempty :line : statement SEMICOLON\n            | expression SEMICOLON\n            | if_statementif_statement : IF expression body END\n                    | IF expression body ELSE body ENDstatement : ID EQUALS expressionstatement : RETURN expression\n                | RETURNexpression : LPAREN expression RPARENfunction_args : expression COMMA function_args\n                    | expression\n                    | empty\n     expression : DISP LPAREN expression RPAREN'

_lr_action_items = {
    '$end': ([0, 1, 2, 3, 4, 7, 14, 15, 16, 17, 29, 32, ], [-7, 0, -1, -2, -7, -10, -5, -6, -8, -9, -11, -12, ]),
    'ID': ([0, 4, 7, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 25, 28, 29, 30, 32, ],
           [8, 8, -10, 20, -3, 20, 20, -8, -9, 20, -4, 20, 8, -16, -20, -11, 8, -12, ]), 'RETURN': (
    [0, 4, 7, 10, 16, 17, 20, 23, 25, 28, 29, 30, 32, ], [9, 9, -10, -3, -8, -9, -4, 9, -16, -20, -11, 9, -12, ]),
    'NUMBER': ([0, 4, 7, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 25, 28, 29, 30, 32, ],
               [10, 10, -10, 10, -3, 10, 10, -8, -9, 10, -4, 10, 10, -16, -20, -11, 10, -12, ]), 'LPAREN': (
    [0, 4, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 22, 23, 25, 28, 29, 30, 32, ],
    [11, 11, -10, 11, -3, 11, 22, 11, -8, -9, 11, -4, 11, 11, -16, -20, -11, 11, -12, ]), 'DISP': (
    [0, 4, 7, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 25, 28, 29, 30, 32, ],
    [12, 12, -10, 12, -3, 12, 12, -8, -9, 12, -4, 12, 12, -16, -20, -11, 12, -12, ]), 'IF': (
    [0, 4, 7, 10, 16, 17, 20, 23, 25, 28, 29, 30, 32, ], [13, 13, -10, -3, -8, -9, -4, 13, -16, -20, -11, 13, -12, ]),
    'END': ([4, 7, 10, 14, 15, 16, 17, 20, 23, 25, 27, 28, 29, 30, 31, 32, ],
            [-7, -10, -3, -5, -6, -8, -9, -4, -7, -16, 29, -20, -11, -7, 32, -12, ]), 'ELSE': (
    [4, 7, 10, 14, 15, 16, 17, 20, 23, 25, 27, 28, 29, 32, ],
    [-7, -10, -3, -5, -6, -8, -9, -4, -7, -16, 30, -20, -11, -12, ]),
    'SEMICOLON': ([5, 6, 8, 9, 10, 19, 20, 24, 25, 28, ], [16, 17, -4, -15, -3, -14, -4, -13, -16, -20, ]),
    'EQUALS': ([8, ], [18, ]), 'RPAREN': ([10, 20, 21, 25, 26, 28, ], [-3, -4, 25, -16, 28, -20, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program': ([0, ], [1, ]), 'body': ([0, 4, 23, 30, ], [2, 14, 27, 31, ]),
                  'empty': ([0, 4, 23, 30, ], [3, 15, 15, 15, ]), 'line': ([0, 4, 23, 30, ], [4, 4, 4, 4, ]),
                  'statement': ([0, 4, 23, 30, ], [5, 5, 5, 5, ]),
                  'expression': ([0, 4, 9, 11, 13, 18, 22, 23, 30, ], [6, 6, 19, 21, 23, 24, 26, 6, 6, ]),
                  'if_statement': ([0, 4, 23, 30, ], [7, 7, 7, 7, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program", "S'", 1, None, None, None),
    ('program -> body', 'program', 1, 'p_program', 'main.py', 93),
    ('program -> empty', 'program', 1, 'p_program', 'main.py', 94),
    ('expression -> NUMBER', 'expression', 1, 'p_expression_number', 'main.py', 110),
    ('expression -> ID', 'expression', 1, 'p_expression_id', 'main.py', 115),
    ('body -> line body', 'body', 2, 'p_body', 'main.py', 125),
    ('body -> empty', 'body', 1, 'p_body', 'main.py', 126),
    ('empty -> <empty>', 'empty', 0, 'p_empty', 'main.py', 137),
    ('line -> statement SEMICOLON', 'line', 2, 'p_line', 'main.py', 141),
    ('line -> expression SEMICOLON', 'line', 2, 'p_line', 'main.py', 142),
    ('line -> if_statement', 'line', 1, 'p_line', 'main.py', 143),
    ('if_statement -> IF expression body END', 'if_statement', 4, 'p_ifstatement', 'main.py', 152),
    ('if_statement -> IF expression body ELSE body END', 'if_statement', 6, 'p_ifstatement', 'main.py', 153),
    ('statement -> ID EQUALS expression', 'statement', 3, 'p_assign', 'main.py', 181),
    ('statement -> RETURN expression', 'statement', 2, 'p_return_statement', 'main.py', 187),
    ('statement -> RETURN', 'statement', 1, 'p_return_statement', 'main.py', 188),
    ('expression -> LPAREN expression RPAREN', 'expression', 3, 'p_expression_group', 'main.py', 196),
    ('function_args -> expression COMMA function_args', 'function_args', 3, 'p_function_args', 'main.py', 201),
    ('function_args -> expression', 'function_args', 1, 'p_function_args', 'main.py', 202),
    ('function_args -> empty', 'function_args', 1, 'p_function_args', 'main.py', 203),
    ('expression -> DISP LPAREN expression RPAREN', 'expression', 4, 'p_disp', 'main.py', 215),
]
